{"version":3,"sources":["BoxForm.js","Box.js","BoxList.js","App.js","serviceWorker.js","index.js"],"names":["BoxForm","props","state","width","height","color","handleChange","bind","handleSubmit","event","this","setState","target","name","value","preventDefault","createBox","id","uuid","onSubmit","htmlFor","onChange","style","marginLeft","Component","Box","handleClick","remove","backgroundColor","margin","onClick","BoxList","boxes","newBox","st","filter","box","map","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wTAuDeA,E,kDAnDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,OAAQ,GACRC,MAAO,IAET,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARH,E,yDAWNE,GACXC,KAAKC,SAAL,eAAiBF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,U,mCAGvCL,GACXA,EAAMM,iBACNL,KAAKT,MAAMe,UAAX,2BAA0BN,KAAKR,OAA/B,IAAsCe,GAAIC,SAC1CR,KAAKC,SAAS,CAAER,MAAO,GAAIC,OAAQ,GAAIC,MAAO,O,+BAI9C,OACE,0BAAMc,SAAUT,KAAKF,cACnB,2BAAOY,QAAQ,SAAf,YACA,2BACEH,GAAG,QACHJ,KAAK,QACLC,MAAOJ,KAAKR,MAAMC,MAClBkB,SAAUX,KAAKJ,eAEjB,2BAAOc,QAAQ,UAAf,cACA,2BACEH,GAAG,SACHJ,KAAK,SACLC,MAAOJ,KAAKR,MAAME,OAClBiB,SAAUX,KAAKJ,eAEjB,2BAAOc,QAAQ,SAAf,aACA,2BACEH,GAAG,QACHJ,KAAK,QACLC,MAAOJ,KAAKR,MAAMG,MAClBgB,SAAUX,KAAKJ,eAEjB,4BAAQgB,MAAO,CAAEC,WAAY,SAA7B,mB,GA9CcC,aCuBPC,E,kDAvBb,aAAe,IAAD,8BACZ,gBACKC,YAAc,EAAKA,YAAYnB,KAAjB,gBAFP,E,0DAKZG,KAAKT,MAAM0B,OAAOjB,KAAKT,MAAMgB,M,+BAG7B,IAAIK,EAAQ,CACVnB,MAAM,GAAD,OAAKO,KAAKT,MAAME,MAAhB,OACLC,OAAO,GAAD,OAAKM,KAAKT,MAAMG,OAAhB,OACNwB,gBAAiBlB,KAAKT,MAAMI,MAC5BwB,OAAQ,aAEV,OACE,6BACE,yBAAKP,MAAOA,IACZ,4BAAQQ,QAASpB,KAAKgB,aAAtB,mB,GAlBUF,aCyCHO,E,kDAtCb,WAAY9B,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAE8B,MAAO,IACtB,EAAKhB,UAAY,EAAKA,UAAUT,KAAf,gBACjB,EAAKoB,OAAS,EAAKA,OAAOpB,KAAZ,gBAJG,E,sDAOT0B,GACRvB,KAAKC,UAAS,SAACuB,GAAD,MAAS,CACrBF,MAAM,GAAD,mBAAME,EAAGF,OAAT,CAAgBC,U,6BAIlBhB,GACLP,KAAKC,SAAS,CAAEqB,MAAOtB,KAAKR,MAAM8B,MAAMG,QAAO,SAACC,GAAD,OAASA,EAAInB,KAAOA,S,+BAG3D,IAAD,OACHe,EAAQtB,KAAKR,MAAM8B,MAAMK,KAAI,SAACD,GAAD,OAC/B,kBAAC,EAAD,CACEnB,GAAImB,EAAInB,GACRqB,IAAKF,EAAInB,GACTd,MAAOiC,EAAIjC,MACXC,OAAQgC,EAAIhC,OACZC,MAAO+B,EAAI/B,MACXsB,OAAQ,EAAKA,YAGjB,OACE,6BACE,+CACA,kBAAC,EAAD,CAASX,UAAWN,KAAKM,YACzB,6BAAMgB,Q,GAjCQR,a,MCQPe,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a25a6dd3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport uuid from \"react-uuid\";\r\n\r\nclass BoxForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      width: \"\",\r\n      height: \"\",\r\n      color: \"\",\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.createBox({ ...this.state, id: uuid() });\r\n    this.setState({ width: \"\", height: \"\", color: \"\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label htmlFor=\"width\">Width : </label>\r\n        <input\r\n          id=\"width\"\r\n          name=\"width\"\r\n          value={this.state.width}\r\n          onChange={this.handleChange}\r\n        />\r\n        <label htmlFor=\"height\"> Height : </label>\r\n        <input\r\n          id=\"height\"\r\n          name=\"height\"\r\n          value={this.state.height}\r\n          onChange={this.handleChange}\r\n        />\r\n        <label htmlFor=\"color\"> Color : </label>\r\n        <input\r\n          id=\"color\"\r\n          name=\"color\"\r\n          value={this.state.color}\r\n          onChange={this.handleChange}\r\n        />\r\n        <button style={{ marginLeft: \"1rem\" }}>Create Box</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoxForm;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Box extends Component {\r\n  constructor() {\r\n    super();\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n  handleClick() {\r\n    this.props.remove(this.props.id);\r\n  }\r\n  render() {\r\n    let style = {\r\n      width: `${this.props.width}rem`,\r\n      height: `${this.props.height}rem`,\r\n      backgroundColor: this.props.color,\r\n      margin: \"1rem auto\",\r\n    };\r\n    return (\r\n      <div>\r\n        <div style={style}></div>\r\n        <button onClick={this.handleClick}>Remove Box</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Box;\r\n","import React, { Component } from \"react\";\r\nimport BoxForm from \"./BoxForm\";\r\nimport Box from \"./Box\";\r\n\r\nclass BoxList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { boxes: [] };\r\n    this.createBox = this.createBox.bind(this);\r\n    this.remove = this.remove.bind(this);\r\n  }\r\n\r\n  createBox(newBox) {\r\n    this.setState((st) => ({\r\n      boxes: [...st.boxes, newBox],\r\n    }));\r\n  }\r\n\r\n  remove(id) {\r\n    this.setState({ boxes: this.state.boxes.filter((box) => box.id !== id) });\r\n  }\r\n\r\n  render() {\r\n    let boxes = this.state.boxes.map((box) => (\r\n      <Box\r\n        id={box.id}\r\n        key={box.id}\r\n        width={box.width}\r\n        height={box.height}\r\n        color={box.color}\r\n        remove={this.remove}\r\n      />\r\n    ));\r\n    return (\r\n      <div>\r\n        <h1>Color Box Maker</h1>\r\n        <BoxForm createBox={this.createBox} />\r\n        <div>{boxes}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoxList;\r\n","import React from \"react\";\nimport BoxList from \"./BoxList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoxList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}